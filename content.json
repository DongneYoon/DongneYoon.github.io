{"meta":{"title":"ASKING BLOG","subtitle":"THE WISE QUESTION IS HALF OF WISDOM.","description":null,"author":"slim8020","url":"https://slim8020.github.io","root":"/"},"pages":[{"title":"","date":"2021-04-20T10:45:16.079Z","updated":"2021-04-20T10:45:16.079Z","comments":true,"path":"googleb481a9f263473972.html","permalink":"https://slim8020.github.io/googleb481a9f263473972.html","excerpt":"","text":"google-site-verification: googleb481a9f263473972.html"},{"title":"categories","date":"2018-01-22T10:42:56.000Z","updated":"2020-10-25T05:48:14.766Z","comments":true,"path":"categories/index.html","permalink":"https://slim8020.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-01-22T10:42:56.000Z","updated":"2020-10-25T05:48:14.809Z","comments":true,"path":"tags/index.html","permalink":"https://slim8020.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"5월 12일","slug":"Diary_0512","date":"2021-05-12T09:45:03.000Z","updated":"2021-05-12T11:47:55.195Z","comments":true,"path":"2021/05/12/Diary_0512/","link":"","permalink":"https://slim8020.github.io/2021/05/12/Diary_0512/","excerpt":"","text":"절약을 잘 했는가? 낭비한 것은 없는가?2끼만 먹고 술도 마시지 않고, 하루종일 블로그와 주식과 씨름 하였다. 집에만 있으니 돈 쓸일이 없다.이제 무엇을 더 줄여볼까? 게으르지는 않았는가? (근면성실)요새는 항상 12시~1시 사이에 잠들어서 7~8시 사이에 일어난다. 잠을 많이 잔다고 게으른건 아니지만 자연스럽게 지내고 있다. 스스로를 너무 압박하는 것도 좋지 않은 것 같다. 하고 싶은대로 하자. 개선 포인트 : 자연스럽게.. 건강한 삶을 위해 어떤 노력을 하였는가? (청소, 요리, 금주, 운동)팔굽혀 펴기, 자전거 타기, 아령들기를 조금 했다. 청소도 했고, 술도 마시지 않았다. 집에만 있으니 모든게 개선되고 있는 것 같다. 사람을 만나면 안되는 건가? 블로그 쓰는데, 주식을 하는데 몰입 하다보니 우울할 틈도 없다. 빨리 뭔가 만들어서 팔아 보기도 하고, 유입률도 많이 늘어서 수입도 생기면 더 행복 해 질 것 같다. 즐겁게 살고 있는가? ( 시간을 보람되게 보냈는가? 사람들과 좋은 관계를 맺고 있는가? 원하는 일을 하고 있는가?)하루가 어떻게 지나가는지 모를정도로 정신없이 살고 있다. 회사 다닐 때나 사람들 만나서 술 마실 때는 고통의 연속이었는데, 나 홀로 집에서 보내니 스트레스도 없고 (있긴 하지만 뭔가 해결하면 될 것 같은.. ) 좋다.사람에 의한 스트레스가 심했던 것 같다. 성장을 위해 어떤 노력을 하였는가? (기록, 정리, 복기, 습관화)글쓰기를 좀 잘 해야겠다 싶다. 블로그를 쓰면서도 쓸 글이 없거나, 쓸데 없는 글들만 생산해 내고 있는 것 같다. 그래도 처음보다는 포스팅 하는데 익숙해 지긴 하였지만, 많은 부분 사진으로 커버하고 있고, 의미 있는 글을 많이 쓰지는 못한다. 최소 1000자 이상의 글을 자꾸 쓰는 연습을 해야 할 것 같다.또한 입력이 없으니 출력이 없다라는 생각이 들었다. 블로그를 자꾸 쓰긴 하는데, 소재가 없다. 개발을 하긴 하는데 무엇을 만들어야 할지 모르는 것처럼..경험이 필요한데, 글쓰는데는 책이 정말 중요한 것 같다. 책을 읽어야겠다. 개선 포인트 : 매일 1000자 이상의 글을 쓰는 연습을 하고, 책을 읽자.","categories":[{"name":"일상","slug":"일상","permalink":"https://slim8020.github.io/categories/일상/"}],"tags":[{"name":"diary","slug":"diary","permalink":"https://slim8020.github.io/tags/diary/"},{"name":"Saving","slug":"Saving","permalink":"https://slim8020.github.io/tags/Saving/"},{"name":"Diligence","slug":"Diligence","permalink":"https://slim8020.github.io/tags/Diligence/"},{"name":"health","slug":"health","permalink":"https://slim8020.github.io/tags/health/"},{"name":"Joy","slug":"Joy","permalink":"https://slim8020.github.io/tags/Joy/"},{"name":"Growth","slug":"Growth","permalink":"https://slim8020.github.io/tags/Growth/"}],"author":["slim8020"]},{"title":"질문","slug":"Essay_Question","date":"2021-05-12T09:37:03.000Z","updated":"2021-05-12T11:47:39.995Z","comments":true,"path":"2021/05/12/Essay_Question/","link":"","permalink":"https://slim8020.github.io/2021/05/12/Essay_Question/","excerpt":"","text":"질문 (Question)나는 질문 하는 것을 힘들어 한다. 질문하면 바보처럼 보일까봐나 정도 되면 알고 있어야 해라고 생각해서모르면 무시당하거나 이용당할 것 같아서상황상 질문 할 때가 아닌것 같아서 이와 같은 이유로 힘들어 한다. 잘지내?하는 일은 어때?아기는 잘 커? 안부를 묻는 것도 질문인데 이것조차도 여러가지 생각들로 인해서 힘들어 한다. 오랫만에 연락하거나 했을 때 특히나 그렇다. 뭔가 목적이 있거나 필요에 의해서 연락한 것은 아닐까내가 하는 질문에 실수가 있지 않을까(아기가 없는데 아기는 잘 커?라는 질문을 했다거나.. )(퇴사 했는데 회사는 잘 다녀?)그리고 상대방의 상황을 기억 하지 못한다는 것도 미안하기도 하다. 이렇게 힘든 질문은 내 삶에 있어서 굉장히 중요한 역할을 하고 있다. 어떠한 문제를 해결할 때도 스스로에게 질문을 한다.그리고 길을 묻거나 가격을 묻거나하는 정보를 얻기 위해서도 질문을 한다.또한 예를 들었던 안부와 같은 형식적인 질문도 있다. 대상에 따라서 스스로에게 질문하기도, 남에게 질문하기도불특정다수에게 질문하기도 한다. 내 일은 질문을 하지 않으면 해결할 수 없는 일들이 많다.내가 작성한 코드가 동작하다가도 문제가 발생하면 질문에서 부터 시작 해야 한다. 왜 문제가 생겼지?이 부분이 문제 인가?이것을 어떻게 바꿔야 하지? 질문을 잘 하면 문제도 빨리 해결이 되곤 한다. 질문을 한다는 것은 어떤 의미 일까?문제를 해결하기 위한 질문, 정보를 습득하기 위한 질문, 형식적인 질문질문에 목적에 따라서 달라지겠지만, 필요에 의해서 질문을 하게 된다. 질문을 잘하는 방법은 무엇일까? 왜 질문을 잘 해야 할까?질문을 잘 하면 문제도 빨리 해결할 수 있고, 정보도 정확하게 얻을 수 있고상대방에게 호감도 얻을 수 있기 때문이다. 질문을 잘 한다는 것은 무엇일까?질문을 잘한다는 것은 커뮤니케이션을 잘한다고 할 수 있을 것 같다.커뮤니케이션의 절반은 질문이 아닌가 질문하지 않는 분위기와 문화학교 다닐 떄도 그랬다. 모르는 것이 생겨도 수업시간에 당당히 묻지 못하고 조용히 친구에게 물어보거나아무도 모르면 그냥 모르는 채로 넘어가곤 했다.왜 그래야 하는지, 어떻게 하면 해결할 수 있는지와 같은 질문에 익숙하지 않다.시키면 시키는 대로 나 잘 되라고 하는 것이다 라고 생각하고 넘어갔다.요새는 그나마 질문하는 사람들이 늘었다. 날카로운 질문에 적잖히 당황하곤 한다. 특히나 아이들일수록 생각치도 못했던 질문을 하는 경우가 많다.단순히 이건 뭐야 라는 질문부터 삼촌/이모는 왜 장가를 안 갔어? 라든가답해주기 어렵다.그러면 질문으로 응수한다.왜 안 갔을것 같아? 왜 그게 궁금해? 질문한다는 것은 관심의 표현 아닐까? 질문을 잘 활용하면 많은 것을 이끌어 낼수 있지 않을까? 효과적인 질문 방법에는 어떤 것이 있을까? 답을 주는 것보다 질문 해주는게 보다 올바른 대답을 찾을 수 있지 않을까?","categories":[{"name":"에세이","slug":"에세이","permalink":"https://slim8020.github.io/categories/에세이/"}],"tags":[{"name":"writing","slug":"writing","permalink":"https://slim8020.github.io/tags/writing/"},{"name":"essay","slug":"essay","permalink":"https://slim8020.github.io/tags/essay/"},{"name":"question","slug":"question","permalink":"https://slim8020.github.io/tags/question/"}],"author":["slim8020"]},{"title":"웹 브라우저가 스크립트를 해석하는 과정 외 JS 학습 내용","slug":"web_browser_exec","date":"2021-05-12T09:19:03.000Z","updated":"2021-05-12T11:46:43.614Z","comments":true,"path":"2021/05/12/web_browser_exec/","link":"","permalink":"https://slim8020.github.io/2021/05/12/web_browser_exec/","excerpt":"","text":"웹 브라우저가 스크립트를 해석하는 과정 &lt;!DOCTYPE html &gt; 을 보고 이 문서가 html 문서임을 인식하여 html 표준에 맞춰서 해석 시작 html 태그 사이의 순서와 포함관계 확인 head 태그 사이에 어떤 태그가 있는가? body 태그 사이에 어떤 태그가 있는가? 순서와 포함관계 확인. 태그분석 후 스타일 정보 분석 script 태그를 만나면 웹브라우저 내부의 자바스크립트 해석기에 스크립트 소스를 넘김.자바스크립트 해석기는 script 사이의 소스를 해석함. 분석된 태그와 스타일 정보를 기준으로 웹 브라우저에 화면 표시 자바 스크립트가 해석될 액션이 있으면 자바 스크립트를 실행 C 계열 언어와 다른 비교 연산자내가 배운 언어들과 다른 연산자. 기억 해 두자. 종류 설명 === 값과 자료형이 모두 같을 때 !== 값이나 자료형 둘중에 하나가 다를 떄 함수 선언과 실행 순서Javascript 는 선언과 호출에 순서 상관 없이 작성할 수 있음. 웹브라우저가 자바스크립트 소스 해석 시 함수 선언 부분을 먼저 하기 때문에선언한 위치와 상관 없이 호출 할 수 있음. 선언을 먼저 하고 호출한 경우1234567/*선언*/function a()&#123;&#125;/*호출*/a(); 호츌을 먼저 하고 선언을 한 경우1234567/*호출*/a();/*선언*/function a()&#123;&#125; 변수의 적용 스코프 종류 설명 지역변수 해당 함수 안에서만 사용 가능. 함수 안에서 var 예약어로 선언 해야 함. 전역변수 적용 범위 없이 사용 가능. 함수 밖에서 선언 할 때는 var 사용. 함수 내에서 사용할 경우 var 예약어 없이 사용. 호이스팅 “끌어올린다” 라는 의미. 변수가 호출되고 나중에 선언하더라도 끌어올려서 선언 된 변수로 처리. 함수 내에서 어디서든 선언할 수 있는 자유도가 생김.","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"},{"name":"javascript","slug":"javascript","permalink":"https://slim8020.github.io/tags/javascript/"}],"author":["slim8020"]},{"title":"반응형 관련 CSS 정리 (미디어쿼리)","slug":"mediaquery","date":"2021-05-11T12:32:03.000Z","updated":"2021-05-12T11:45:37.952Z","comments":true,"path":"2021/05/11/mediaquery/","link":"","permalink":"https://slim8020.github.io/2021/05/11/mediaquery/","excerpt":"","text":"미디어 쿼리 속성반응형 웹 디자인에서 가장 기본적인 개념.사이트에 접속하는 장치에 따라 특정한 CSS 스타일을 적용. 형태 : @media [only|not] 미디어 유형 [and 조건] * [and 조건] 미디어 유형 종류 설명 all 모든 미디어 유형 print 인쇄 장치 screen PC 스크린 + 스마트폰 스크린 tv 음성과 영상이 동시에 출력되는 TV aural 화면을 읽어 소리로 출력해 주는 장치 braille 점자 표시 장치 handled 패드 projection 프로젝터 tty 디스플레이 기능이 제한된 장치. 픽셀 단위를 사용할 수 없음 embossed 점자 프린터 조건웹페이지의 너비와 높이웹 문서 내용이 화면에 나타나는 영역을 뷰포트라고 하는데 뷰포트의 너비와 높이를 미디어 쿼리 조건으로 사용함. 종류 설명 width, height 뷰포트의 가로, 세로 길이 min-width, min-height 뷰포트의 최소 너비, 최소 높이 max-width, max-height 뷰포트의 최대 너비, 최대 높이 단말기의 너비와 높이 종류 설명 device-width, device-height 디바이스의 가로, 세로 길이 min-device-width, min-device-height 디바이스의 최소 너비, 최소 높이 max-device-width, max-device-height 디바이스의 최대 너비, 최대 높이 예시)@media all and (min-device-width: 360px) and (min-device-height: 640px){} 화면 회전 종류 설명 예시 portrait 단말기의 세로 모드 orienntation: portrait landscape 단말기의 가로 모드 orientation : landscape 모바일 퍼스트(mobile first) 기법 다른 기기에 비해 제약 조건이 많은 모바일의 레이아웃을 기본으로 스타일링 중단점 기준이 되는 단말기에 따라 달라질 수 있음. 스마트폰의 경우 미디어 쿼리를 사용하지 않고, 기본 CSS 로 작성 태블릿의 경우 세로크기가 768px 이상, 가로크기 1024px 이상 데스크톱의 경우 1024px 이상 외부 CSS 파일 연결link 를 이용할 때&lt; link rel=”stylesheet” media= “미디어쿼리조건” href=”css 파일경로” s&gt; import 를 이용할 때@import url(“css/pc.css”) only screen and (min-width : 1024px)","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"},{"name":"mediaquery","slug":"mediaquery","permalink":"https://slim8020.github.io/tags/mediaquery/"},{"name":"flex","slug":"flex","permalink":"https://slim8020.github.io/tags/flex/"},{"name":"grid","slug":"grid","permalink":"https://slim8020.github.io/tags/grid/"}],"author":["slim8020"]},{"title":"사용자 입력에 필요한 HTML 정리","slug":"input_form","date":"2021-05-10T06:32:03.000Z","updated":"2021-05-12T11:45:44.071Z","comments":true,"path":"2021/05/10/input_form/","link":"","permalink":"https://slim8020.github.io/2021/05/10/input_form/","excerpt":"","text":"대부분의 태그는 숙지하고 있어야 겠지만 개발 시 기억이 안날 수 있으므로 정리 해 둔다. 폼 관련 태그 종류 설명 &lt;form&gt; 폼의 시작과 끝 &lt;fieldset&gt; 폼 요소를 그룹으로 묶음 &lt;legend&gt; 필드셋에 제목을 나타냄 &lt;input&gt; 사용자 입력 받을 필드를 삽입 &lt;select&gt; 드롭다운 목록 삽입 &lt;option&gt; 드롭다운 목록 삽입 &lt;textarea&gt; 텍스트를 여러줄로 입력할 수 있는 텍스트 영역 삽입 &lt;datalist&gt; 데이터 목록 삽입 input 태그 타입 종류 설명 text 한줄짜리 텍스트 입력 password 비밀번호를 입력 (텍스트 표시가 *로 표시) search 검색할 때 입력하는 필드 url URL 주소를 입력할 수 있는 필드 email 이메일 주소를 입력할 수 있는 필드 tel 전화번호를 입력 할 수 있는 필드 checkbox 체크박스 (여러 항목 중 여러개 선택 가능) radio 라디오 버튼 (여러 항목 중 한개만 선택 가능) number 값을 조절할 수 있는 스핀박스 range 숫자를 조절 할 수 있는 슬라이더 date 사용자 지역 기준 연,월,일 입력 필드 month 사용자 지역 기준 연,월 입력 필드 week 사용자 지역 기준 연,주 입력 필드 time 사용자 지역 기준 시간(시,분,초) 입력 필드 datetime 국제 표준시(UTC)로 설정된 날짜와 시간(연,월,일,시,분,초) 입력 datetime-local 사용자 지역 기준 날짜와 시간(연,월,일,시,분,초) 입력 submit 전송 버튼 reset 리셋 버튼 image 이미지 버튼 button 일반 버튼 file 파일을 첨부 할 수 있는 버튼 hidden 사용자에게 보이지 않지만 서버로 넘겨주는 값이 있는 필드 input 태그 속성 종류 설명 autofocus 웹 문서가 열리면 입력 필드 안에 마우스 포인터 표시 placeholder 텍스트 필드에 힌트 표시 (좋은 UI 는 아니란다.) readonly 입력 필드를 읽기 전용으로 지정 required 필수 입력 필드 max 숫자 입력 필드에서 최대값 지정 min 숫자 입력 필드에서 최소값 지정 step 숫자 입력 필드에서 증감할 간격 지정 maxlength 텍스트 입력 최대 길이 지정 minlength 텍스트 입력 최소 길이 지정 size 텍스트 관련 필드에서 화면에 표시할 크기를 지정 list 연결할 데이터 목록을 지정","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"}],"author":["slim8020"]},{"title":"Summary of CSS Transitions","slug":"css_transition","date":"2021-05-10T02:32:03.000Z","updated":"2021-05-12T11:46:02.534Z","comments":true,"path":"2021/05/10/css_transition/","link":"","permalink":"https://slim8020.github.io/2021/05/10/css_transition/","excerpt":"","text":"You should be familiar with most of the properties, but keep them organized as they may not be remembered during development. Transition attribute Propeties Explanation Example transition-property Targeting the transition transition-property: width, height transition-duration Targeting the transition transition-property: width, height transition-timing-function Targeting the transition transition-property: width, height transition-delay Targeting the transition transition-property: width, height transition Targeting the transition transition-property: width, height transition properties Propeties Explanation Example all All properties are transition targets. Default transition : all none No properties change during transition transition : none property name Specify the properties to apply the transition effect (background color, width, height, etc…) transition : width, height transition-timing-function properties Propeties Explanation Example ease Start slowly at first, get faster, and finish slowly at the end. Default transition-timing-function : ease linear Progress at the same speed from start to finish. transition-timing-function : linear ease-in Start slowly transition-timing-function : ease-in ease-out End slowly transition-timing-function : ease-out ease-in-out Starts Slowly Ends Slowly transition-timing-function : ease-in-out cubic-bezier(n,n,n,n) Define and use a Bezier function. n value is used only between 0 and 1 transition-timing-function : cubic-bezier(0.1, 0.5, 0.5, 0.2)","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"},{"name":"transition","slug":"transition","permalink":"https://slim8020.github.io/tags/transition/"}],"author":["slim8020"]},{"title":"Summary of CSS Box Model Properties","slug":"css_boxmodel","date":"2021-05-04T06:32:03.000Z","updated":"2021-05-12T11:46:06.447Z","comments":true,"path":"2021/05/04/css_boxmodel/","link":"","permalink":"https://slim8020.github.io/2021/05/04/css_boxmodel/","excerpt":"","text":"You should be familiar with most of the properties, but keep them organized as they may not be remembered during development. Box Model Properties Propeties Explanation Example width Specify the width of the box model width: 100px height Specify the height of the box model height: 100px box-sizing Specifies the criteria for calculating the size of the box model box-sizing : border-box / box-sizing : content-box box-shadow Adding a shadow effect to the box model box-shadow : width height area color Border Properties Propeties Explanation Example border-style Designate border styles in 4 directions at once border-style: solid border-‘location’-style Specify only the border style at the selected location border-top-style: solid border-width Specify the thickness of the borders in 4 directions at once border-width: 10px border-‘location’-width Specify only the thickness of the border at the selected location border-top-width: 10px border-color Designate the color of the borders in 4 directions at the same time, up, down, left, and right border-color: #000 border-‘location’-color Specify only the border color at the selected location border-top-color: #f00 border-radius Round the vertices in four directions, top, bottom, left, and right border-radius: 10px border-‘location’-radius Round only the vertices of the selected location border-top=left-radius: 10px Margin Properties Propeties Explanation Example margin Specify margins at once margin: 10px 10px 5px 5px margin-‘location’ Specify the margin of the specified position (top, left, bottom, right) margin-top: 10px padding Specify padding all at once padding: 10px 10px 5px 5px padding-‘location’ Specify the padding of a fixed position (top, left, bottom, right) padding-top: 10px Layout Properties Propeties Explanation Example display Specify how to place elements on the screen (block, inline, inline-block, none) display : block float Place web elements left or right. float : left clear Turn off the float property clear : both Position Properties Propeties Explanation Example left, right, top, bottom Specifies how far up, down, left, and right between the anchor and the element left:10px position Positioning of web elements (static, relative, absolute, fixed) position: relative","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"}],"author":["slim8020"]},{"title":"자주 쓰는 HTML 태그 정리","slug":"html_tag","date":"2021-05-04T06:32:03.000Z","updated":"2021-05-12T11:45:50.586Z","comments":true,"path":"2021/05/04/html_tag/","link":"","permalink":"https://slim8020.github.io/2021/05/04/html_tag/","excerpt":"","text":"대부분의 태그는 숙지하고 있어야 겠지만 개발 시 기억이 안날 수 있으므로 정리 해 둔다. 텍스트 관련 태그 종류 설명 &lt;hn&gt; 제목을 나타냄 &lt;p&gt; 텍스트 단락. 내용이 길면 웹브라우저 창의 너비에 맞게 줄바꿈 &lt;br&gt; 줄바꿈. &lt;blockquote&gt; 내용 인용. 다른 내용보다 들여쓰고 단락으로 표시됨. &lt;strong&gt; 굵게 표시. 화면 낭독기에서 강조해서 읽음. &lt;b&gt; 굵게 표시. 중요하지 않음 &lt;em&gt; 중요한 텍스트를 기울여 표시(문장). 화면 낭독기에서 강조해서 읽음. &lt;i&gt; 기울여 표시. 중요하지 않음. &lt;ins&gt; 추가한 내용을 표시 &lt;del&gt; 삭제한 내용을 표시 &lt;sup&gt; 위 첨자 &lt;sub&gt; 아래 첨자 목록 관련 태그 종류 설명 &lt;ol&gt; 순서 있는 목록의 시작과 끝을 나타냄. &lt;ul&gt; 순서 없는 목록의 시작과 끝을 나타냄. &lt;li&gt; 목록의 각 항목을 나타냄. &lt;dl&gt; 설명 목록의 시작과 끝을 나타냄. &lt;dt&gt; 설명 목록의 이름(제목) &lt;dd&gt; 설명 목록의 값(설명) 표 관련 태그 종류 설명 &lt;table&gt; 표의 시작과 끝을 나타냄. &lt;caption&gt; 표의 제목 &lt;tr&gt; 표의 행 &lt;td&gt; 표의 셀 &lt;th&gt; 제목 셀 &lt;thead&gt; 표 구조에서 제목 부분 &lt;tbody&gt; 표 구조에서 본문 부분 &lt;tfoot&gt; 표 구조에서 요약이나 정리 부분 &lt;col&gt; 표에서 열의 스타일 지정 &lt;colgroup&gt; 표에서 여러열을 한꺼번에 묶어 스타일 지정 멀티미디어 관련 태그 종류 설명 &lt;object&gt; 멀티미디어, PDF 파일등 다양한 형식의 파일 삽입 &lt;embed&gt; audio, video, object 태그를 지원하지 않을 경우 멀티미디어 파일 삽입 &lt;img&gt; 이미지 파일 삽입 &lt;audio&gt; 오디오 파일 삽입 &lt;video&gt; 비디오 파일 삽입)","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"}],"author":["slim8020"]},{"title":"웹 퍼블리싱에서 중요하다고 생각 되는 것","slug":"Essay_webpubl","date":"2021-04-23T02:13:03.000Z","updated":"2021-05-12T11:47:44.567Z","comments":true,"path":"2021/04/23/Essay_webpubl/","link":"","permalink":"https://slim8020.github.io/2021/04/23/Essay_webpubl/","excerpt":"","text":"웹 퍼블리싱에서 중요하다고 생각 되는 몇가지를 정리한다. 이에 따라 수련하면 좋을 것 같다. 속도 : 개발 환경의 단축키 사용에 익숙해지는 것 &gt; vscode 단축키 연습 그때 그때 필요한 태그 및 스타일을 기억하고 있다가 바로 사용이 가능 할 것 스타일링의 기본 원리를 이해 하고 있는 것 ( 선택자, 스타일 우선순위 ) 많이 만들어 보고 항상 시간을 측정하는 연습을 하면 좋을 것 같음. 꼼꼼함 : 충분한 테스트 (오타로 인한 버그를 찾는데 시간을 많이 보내게 된다.) &gt; style lint 를 이용하는게 좋을 것 같음. 분석 및 테스트 도구에 대한 사용법 숙지 효율적인 코드: bundler 를 사용하여 파일의 최적화 minify 를 적용하여 코드 용량 줄이기 가독성이 떨어지지 않도록 클래스, ID 등의 네이밍 규칙 지정 스타일 가이드 페이지 작성 사전 sitemap 작성","categories":[{"name":"에세이","slug":"에세이","permalink":"https://slim8020.github.io/categories/에세이/"}],"tags":[{"name":"Webpublishing","slug":"Webpublishing","permalink":"https://slim8020.github.io/tags/Webpublishing/"},{"name":"Essay","slug":"Essay","permalink":"https://slim8020.github.io/tags/Essay/"},{"name":"HTML","slug":"HTML","permalink":"https://slim8020.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://slim8020.github.io/tags/CSS/"},{"name":"Training","slug":"Training","permalink":"https://slim8020.github.io/tags/Training/"}],"author":["slim8020"]},{"title":"NPM 사용 가이드 총정리 (설치부터 삭제까지..)","slug":"NPM","date":"2021-04-20T07:22:44.000Z","updated":"2021-05-12T11:48:46.097Z","comments":true,"path":"2021/04/20/NPM/","link":"","permalink":"https://slim8020.github.io/2021/04/20/NPM/","excerpt":"","text":"NPM 은 무엇인가?NPM(Node Package Manager)은 Node 로 만들어진 패키지를 관리하는 도구이다.개발 시 필요한 컴포넌트, 프레임워크, 라이브러리 등등 여러 가지를 다운 받아서 개발하고자 하는 웹사이트에 반영할 수 있도록 제공하는 도구 이다.NPM 웹사이트(https://www.npmjs.com/)를 통해서 패키지를 검색하고 CLI (Command-Line Interface) 를 통해 패키지를 다운로드 받고, 설치하고, 업데이트 할 수 있다. NPM은 어떻게 설치 해야 하는가?NPM 은 Node.js (https://nodejs.org/)에 포함 되어 있다. 따라서 Node.js 를 설치하면 된다. 어떤 버전의 Node 가 설치 되어 있는지 확인 하는 방법은 아래와 같다. node -v 어떤 버전의 NPM 이 설치 되어 있는지도 확인 할 수 있다. npm -v 결과 NPM Package 오른쪽에 얼마나 유명한지, 퀄리티는 어떤지, 유지보수는 잘 되는지를 표시 해 주고 있다. NPM Package 찾기npm 웹사이트에서 필요로 하는 패키지를 검색한다. Package 를 찾았으면 패키지의 자세한 정보(주간 다운로드 수, 버전, 라이센스, git 리포지토리, 패키지 사용방법 등)를 확인 할 수 있다. NPM 으로 개발 환경 만들기우선 개발환경을 꾸미고 싶은 폴더를 생성하고 해당 폴더에 진입한다. mkdir npmtest cd npmtest 아래 명령어를 입력한다. npm init -y package.json 파일이 생성된다. 하단에서 설명하겠지만 우선 Package 를 하나 설치 한다. (따라 해 보기) npm install lodash package-lock.json 파일과 함께, node_modules 폴더가 생성된다. package.json 과 package-lock.json 의 자세한 설명은 별도로.. NPM Package 설치 방법npm install 패키지 이름 예) npm install lodash 결과) 옵션 -g 를 쓰면 해당 폴더만이 아닌 시스템 어디서든 패키지를 사용할 수 있다. NPM Pakcage 업데이트 하는 방법npm update 패키지명 예) npm update lodash 설치된 패키지를 한꺼번에 업데이트 하려면? npm update --save 업데이트가 됐는지 확인 해 보려면? npm outdated 업데이트 전 업데이트 후 설치된 NPM Package 를 알아보기npm list 패키지에 포함된 패키지들도 모두 나오므로 보기 힘들다. npm list --depth=0 최상단 패키지 이름만 나온다. NPM Package 삭제 하는 방법설치한 패키지 중에 더 이상 사용하지 않거나, 잘못 설치한 경우 삭제 할 수 있다. npm uninstall 패키지명 예) npm uninstall lodash 결과) 패키지가 삭제 되었는지 list 를 사용하여 확인 할 수 있다.","categories":[{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"}],"tags":[{"name":"NPM","slug":"NPM","permalink":"https://slim8020.github.io/tags/NPM/"},{"name":"NODE","slug":"NODE","permalink":"https://slim8020.github.io/tags/NODE/"}],"author":["slim8020"]},{"title":"Adobe XD 플러그인 개발 시작 하기","slug":"FirstXDPlugin","date":"2019-08-16T02:13:03.000Z","updated":"2021-05-12T11:52:19.493Z","comments":true,"path":"2019/08/16/FirstXDPlugin/","link":"","permalink":"https://slim8020.github.io/2019/08/16/FirstXDPlugin/","excerpt":"","text":"전제 조건아래와 같은 버전을 기준으로 XD 플러그인 개발 방법을 설명한다. 개발환경 : Adob XD 22.0 Adobe XD 플러그인을 개발하기 위해서는 기본적으로 HTML, CSS, Javascript 에 대한 기본 지식이 필요하다. Adobe 계정 생성Adobe 에 가입하고 계정을 만든다. 플러그인 생성 해당 경로 (https://console.adobe.io/plugins) 에 접속한다. Create Plugin 을 클릭한다. 스타터 플러그인이 생성 되면 다운로드 받는다. 플러그인 개발 버전 설치다운받은 스타터 플러그인으로 XD에 설치하여 바로 확인해 볼 수 있다.스타터 플러그인을 설치하면 Hello 라는 플러그인 항목과 함께 실행 시키면 보라색 사각형이 그려진다. 설치 방법은 플러그인 &gt; 개발 &gt; 개발 폴더 표시 후에, 다운로드 받은 파일의 압축을 해당 폴더에 풀어 놓으면 된다.그리고 플러그인 리로드를 수행한다. 플러그인 리로드플러그인을 수정 후에는 리로드를 수행 하여 변경 사항을 반영 해야 한다. 디버깅Adobe XD 에서 기본적으로 제공하는 디버깅 방법은 콘솔로 로그를 표시하는 방식이다.js 파일에 아래와 같이 코드를 추가하면 코드 상에서 필요한 지점의 결과 값을 콘솔로 볼 수 있다. console.log(“Say Hello!”); 폴더 구조 main.js : 동작에 대한 로직 구현 manifest.json : 플러그인의 이름, 메뉴 구조를 설정 출처 : https://adobexdplatform.com/plugin-docs/tutorials/quick-start/","categories":[{"name":"플러그인개발","slug":"플러그인개발","permalink":"https://slim8020.github.io/categories/플러그인개발/"}],"tags":[{"name":"AdobeXD","slug":"AdobeXD","permalink":"https://slim8020.github.io/tags/AdobeXD/"},{"name":"Plugin","slug":"Plugin","permalink":"https://slim8020.github.io/tags/Plugin/"},{"name":"Development","slug":"Development","permalink":"https://slim8020.github.io/tags/Development/"},{"name":"어도비XD","slug":"어도비XD","permalink":"https://slim8020.github.io/tags/어도비XD/"},{"name":"플러그인","slug":"플러그인","permalink":"https://slim8020.github.io/tags/플러그인/"},{"name":"개발","slug":"개발","permalink":"https://slim8020.github.io/tags/개발/"}],"author":["slim8020"]},{"title":"비기능 요구 테스트 (Non-Functional Test)","slug":"SoftwareTest_nonFunctional","date":"2019-08-10T14:13:03.000Z","updated":"2021-05-12T11:46:22.145Z","comments":true,"path":"2019/08/10/SoftwareTest_nonFunctional/","link":"","permalink":"https://slim8020.github.io/2019/08/10/SoftwareTest_nonFunctional/","excerpt":"","text":"이 포스트는 “지식 제로부터 배우는 소프트웨어 테스트”를 읽고 학습한 내용입니다. 우리 팀은 테스트를 그렇게 잘하는 팀은 아니다. 테스트를 전혀 모르는 신입 한 명이 테스터의 전부다.나도 개발자 출신이라 그동안에 테스트 활동을 옆에서만 지켜 봤지, 실제로 테스트를 수행 해 본적은 없다. 그래도 들은 풍월은 있어서 기능 요구 테스트와 비기능 요구 테스트를 각각 수행은 하고 있다. 이 책을 읽기 전에는 기능 요구 테스트는 단순히 기능별로 나눈 케이스로 테스트를 진행 했고, 비기능 요구 테스트는 최근에서야 소프트웨어의 동작 성능을 체크하는 수준이다. 이번에는 이 책에서 말하는 가장 어려운 테스트인 비기능 요구 테스트에 대해서 정리 해 보도록 하겠다. 비기능 요구 테스트란?비기능 요구 테스트는 기능이 아닌 부분, 즉 품질 특성을 테스트하는 것을 말한다. 그렇다면 품질 특성에는 어떤 것들이 있을까? 아래 표(ISO 9126 품질 특성)와 같다. 소프트웨어 아키텍트에게 설문한 결과 이 중에서 중요한 특성은 보안성, 신뢰성, 효율성 이라고 한다.이 특성들을 모두 만족하는 것은 무리이며, 특성 간은 각각 Trade-off 관계라고 말하고 있다. 성능 테스트(Performance Test) 란? 소프트웨어를 설계하거나 기획하는 단계에서 설정된 소프트웨어의 성능이 기대한 대로 나오는가를 확인하기 위한 테스트이다. (우리 팀에서도 성능 테스트를 종종 하는데, 주로 하는 것이 소프트웨어 로딩 시간 체크 이다.) 성능 테스트도 비기능 요구 테스트의 일부이다. 성능 테스트시 주의 사항 성능의 정의는 명확하게 해야 한다.예를 들어 30MB 를 처리할 때 1분 이내로 되어야 한다 10MB 의 파일을 열 때 10초 이상이 걸리면 안된다 소프트웨어를 실행 시키면 로딩 시간이 1분 이내로 모든 초기 작업을 완료 해야 한다와 같은 정의가 명확해야 한다. 요구 정의대로만 테스트 케이스를 작성해서는 안된다.테스트는 버그를 찾는 작업 이므로 요구가 정의 된 대로만 테스트가 수행이 되면 아무 의미가 없다. 성능 테스트는 미루지 말아야 한다.성능 테스트에서 발견되는 버그는 최악의 버그다. 문제가 심한 경우 소프트웨어 구조 자체를 변경해야 하는 경우까지도 있을 수 있으므로 어느 정도 소프트웨어가 동작하는 시점에서는 수행하는 것이 좋다. 성능 테스트 5 단계 ( 이 부분은 책에도 내용이 별로 없다. ) 아키텍처 검증소프트웨어의 아키텍처 측면의 스펙을 검토 한다. 예를 들어 우리 팀의 경우 electron 기반의 데스크탑 앱을 만들고 있는데, electron 자체에서 지원하는 스펙이 동작하는데 적합한지를 확인 해야 한다. 성능 벤치 마크실제 개발된 소프트웨어를 테스트 하는 것을 말한다. 소프트웨어의 로딩 시간을 측정 한다든가 하는 활동을 말한다. 성능 회귀 테스트이 테스트는 프로그램 개발 도중에 항상 변하는 상태에서 수행 하는 것을 말한다. 기능 수정이 이루어진 부분만 테스트하는 것이 아니라, 기존에 확인 했던 다른 부분도 확인을 해 줘야 한다. 성능 튜닝 및 엑셉턴스 테스트최종 제품이 요구 정의에 정해진 성능을 내는지 확인하는 것을 말한다. 24x7 성능 모니터링실제 사용 하는 데이터로 테스트가 불 가능 할 경우 더미 데이터로 검토 하라는 이야기인데.. 왜 24x7 성능 모니터링인지… 모르겠다. 나는 성능 테스트에 대해서는 크게 인사이트를 얻을 수 없었다. 신뢰성 테스트소프트웨어의 신뢰성을 측정 하려면 신뢰도 성장 곡선을 그려야 한다. 여기서 의미 있는 개념은 평균고장간격 (Mean Time Between Failure : MTBF ) 이라는 것인데, 단위 시간당 어느 정도의 Failure (버그나 시스템 멈춤, 재부팅)을 일으키는지 측정하는 것이다. 이를 통해 신뢰성을 판단 할 수 있다고 한다.예를 들어 어떤 소프트웨어를 테스트 해서 평균 5시간 정도 조작하면 결국 느려진다던가 멈춘다거나 한다면 MTBF 는 5시간 이다. 그렇다면 소프트웨어의 요구 정의에서 MTBF 가 24시간 이상 되어야 한다 라고 하면 신뢰성 테스트의 기준이 될 것 같다. 그리고 신뢰도 성장 곡선에 대한 내용이 나오는데, 신뢰도 성장 곡선은 아래 수식으로 그릴 수 있다. m(t) : 시간 축에 대한 신뢰성a : 기대 하는 장애(버그)의 총 수b : 버그 발견율t : 테스트 실행 시간 최종적으로는 테스트 케이스 실행에 대해 버그 곡선을 그리는 것이 거의 의미가 없다고 말하고 있다.(왜 설명한거지..) 일단은 그냥 이런 것이 있다 정도로 넘어가야 겠다. 설명도 명확치 않을 뿐 더러 어떻게 활용 해야 할지도 사실상 의문이다. 이 부분에 대해서는 다른 책을 좀 더 읽어보고 공부 하는 것으로 하겠다.","categories":[{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/categories/소프트웨어테스트/"}],"tags":[{"name":"SoftwareTest","slug":"SoftwareTest","permalink":"https://slim8020.github.io/tags/SoftwareTest/"},{"name":"Test","slug":"Test","permalink":"https://slim8020.github.io/tags/Test/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/tags/소프트웨어테스트/"},{"name":"NonFunctional","slug":"NonFunctional","permalink":"https://slim8020.github.io/tags/NonFunctional/"},{"name":"PerformanceTest","slug":"PerformanceTest","permalink":"https://slim8020.github.io/tags/PerformanceTest/"},{"name":"비기능테스트","slug":"비기능테스트","permalink":"https://slim8020.github.io/tags/비기능테스트/"},{"name":"성능테스트","slug":"성능테스트","permalink":"https://slim8020.github.io/tags/성능테스트/"}],"author":["slim8020"]},{"title":"탐색적 테스트(Exploratory Test)","slug":"SoftwareTest_.ExploratoryTesting","date":"2019-08-09T14:13:03.000Z","updated":"2021-05-12T11:46:17.076Z","comments":true,"path":"2019/08/09/SoftwareTest_.ExploratoryTesting/","link":"","permalink":"https://slim8020.github.io/2019/08/09/SoftwareTest_.ExploratoryTesting/","excerpt":"","text":"이 포스트는 “지식 제로부터 배우는 소프트웨어 테스트”를 읽고 학습한 내용입니다. 탐색적 테스트지난 포스트에서 소개한 화이트 박스 테스트와 블랙 박스 테스트는 테스트 케이스 기반 테스트이다.좀 더 쉽게 설명하면 테스트 케이스를 설계하고 테스트를 진행하는 형태의 테스트 방식이다.이번에 소개하는 탐색적 테스트는 생각하며 테스트 하기 방식이다. 지난 포스트에서 “똑똑하지 않은 테스트를 시간만 많이 들인다고 소프트웨어 품질이 올라가지는 않는다”고 이야기 하자마자 보다 똑똑하게 테스트 하는 방법에 대해서 소개를 하고 있다. 탐색적 테스트란?말 그대로 탐색 하면서 테스트를 진행하는 것이다. 반복하지만 생각하면서 테스트 하기 이다.이 테스트 기법의 핵심은 소프트웨어의 특정 부분에 버그들이 집중되어 분포한다 라는 특성을 이용한 테스트 기법이다. 탐색적 테스트는 1983년에 Cem Kaner 교수가 제안한 방법인데, 그는 저자의 스승이라고 한다.그는 이렇게 말했다.탐색적 테스트는 소프트웨어 테스트 이해와 테스트 설계와테스트 실행을 동시에 수행하는 테스트이다. 이 책에서는 테스트 케이스 실행으로 발견할 수 있는 버그는 전체의 50% 이하 일 것이라고 한다.그럴 거라면 차라리 테스트 케이스를 일일이 사전에 작성하는 것보다는 생각하면서 소프트웨어를 테스트 하는 것이 낫다. 테스트 케이스 기반 테스트의 단점 프로젝트 초기 단계에 테스트 케이스를 작성하려고 해도 대상이 되는 소프트웨어가 없으므로 어림짐작으로 케이스를 작성하는 경우가 많다. 최악의 경우 요구 사항을 나열 해 놓은 테스트 케이스가 작성된다. ( 우리 프로젝트의 경우 그런 경우가 많았다. )요구사항이 명확치 않으므로 경계값 또한 모호하여 제대로 된 경계값 분석 조차 이루어지지 않는다. 너무 이른 테스트 케이스 작성은 소프트웨어 테스트 공수의 현저한 증가를 가져온다. 테스트 케이스 기반 테스트는 아래 두 가지가 결여되어 있다. 가. 테스트를 실행하면서 어딘가 다른 부분에 문제가 없는지를 생각 해 보고 그 곳을 테스트 하는 것 나. 소프트웨어에서 약한 부분을 발견 했다면 그곳의 집중적 테스트 결과적으로 중요도나, 심각도, 버그 분포에 대한 고려가 없는 테스트이므로 비효율적이다. 탐색적 테스트 수행 방법 기준(Criteria)의 결정탐색적 테스트 수행 전에 어떤 소프트웨어야 하는지에 관한 기준을 정해야 한다. 아래 표는 해당 예이다. 탐색적 테스트 수행탐색적 테스트 수행은 아래의 다섯 가지 단계로 이루어진다.가. 대상 소프트웨어를 정함.나. 기능을 목록화 함.다. 해당 기능들을 조사하여 약한 부분을 발견.라. 각 기능을 테스트 하고 버그를 기록마. 계속적인 테스트 실행 탐색적 테스트의 단점비기능 요구 테스트에 어울리지 않는다. 예외가 있다면 사용성(Usability)테스트이다. 테스트의 효율을 극대화 하기 위해서는.. 일반적인(기술적인 이해도나 깊이가 없는) 테스터가 탐색적 테스트를 수행 하였을 경우에는 코드 커버리지가 테스트 케이스 기반의 테스트나 별반 차이가 없다. 하지만 일반적인 테스터에게 개발자가 프로그램의 구조를 설명해 주고 테스트를 하면 아래와 같은 그래프가 나온다. 따라서 탐색적 테스트 + 기술을 갖춘 테스트 담당자의 조합이라면 짧은 시간에 최대의 결과를 얻을 수 있다. 결론소프트웨어 설계 회의 시에 테스터를 참석 시키거나, 소프트웨어 설계가 완료 되었을 때 테스터에게 그 구조에 대해서 자세히 설명 해 준다면 탐색적 테스트를 수행하여 보다 나은 품질의 소프트웨어를 얻을 수 있다.또한 테스트의 스타일과 방법은 다양하다. 그 스타일과 방법을 적재적소에 적용할 수 있는가가 테스트의 성과를 좌우한다.","categories":[{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/categories/소프트웨어테스트/"}],"tags":[{"name":"SoftwareTest","slug":"SoftwareTest","permalink":"https://slim8020.github.io/tags/SoftwareTest/"},{"name":"Test","slug":"Test","permalink":"https://slim8020.github.io/tags/Test/"},{"name":"ExploratoryTest","slug":"ExploratoryTest","permalink":"https://slim8020.github.io/tags/ExploratoryTest/"},{"name":"탐색적테스트","slug":"탐색적테스트","permalink":"https://slim8020.github.io/tags/탐색적테스트/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/tags/소프트웨어테스트/"}],"author":["slim8020"]},{"title":"화이트박스 테스트와 블랙박스 테스트","slug":"SoftwareTest_WhiteBox_BlackBox","date":"2019-08-08T14:13:03.000Z","updated":"2021-05-12T11:46:31.998Z","comments":true,"path":"2019/08/08/SoftwareTest_WhiteBox_BlackBox/","link":"","permalink":"https://slim8020.github.io/2019/08/08/SoftwareTest_WhiteBox_BlackBox/","excerpt":"","text":"이번 포스팅에서는 화이트 박스 테스트와 블랙 박스 테스트에 대해서 이야기 해 보고자 한다.물론 “지식 제로부터 배우는 소프트웨어 테스트” 를 읽고 공부한 내용이다. 화이트 박스 테스트 란 무엇인가?소프트웨어의 내부구조를 철저하게 분석하여 논리 구조가 올바른지 분석하는 테스트를 말한다. 정의 대로 논리 구조를 검증하는 테스트이므로 소프트웨어 사양이 잘못된 것은 검증할 수 없다.이 책에서는 두 가지 정도를 이야기 하고 있다. 첫째, 제어 흐름 테스트 ( 소프트웨어의 동작 흐름 테스트 )이다. 제어 흐름 테스트는 말 그대로 논리적 흐름에 대한 테스트를 하는 것을 말한다. 여기서 커버리지라는 개념이 나오는데, 사전적 의미로 “범위” 를 말한다. 커버리지는 두 가지가 있는데, 스테이트먼트 커버리지와 브랜치 커버리지 이다. 스테이트먼트 커버리지는 말그대로 명령문만 테스트 하는 것을 말한다. 이것이 무슨 의미인가?예를 들어 아래 코드에서 (a) 가 동작하는 경우와 (b)가 동작하는 경우만 테스트 하는 것을 말한다.테스트 케이스로 i=1 이고 k=2인 경우를 테스트하면 (a)와 (b)를 테스트 할 수 있다. if(i&gt;0){ j = i+1; //(a) } if(k&lt;3){ j = i-1; //(b) } 하지만 그 이외의 경우 i=0 이고 k=3 인 상황은 검증이 되지 않는다 그래서 브랜치 커버리지를 확인 해야 한다.브랜치 커버리지는 분기를 테스트 하는 것을 말한다. i&gt;0 조건의 True 인 상황과 False 인 상황을 검증하고 k&lt;3 조건이 True 인 상황과 False 인 상황 모두를 검증 하는 것이다. 둘째, TDD (Test Driven Development) TDD(테스트주도개발)는 사실 개발 방법론의 하나로 알고 있다. 저자도 말하고 있는 것은 TDD의 본질은 확실하게 품질을 보증하겠다는 의미보다는 변경에 강인하고 신속한 개발을 위한 방법이라는 것이다.이 부분에 대해서는 따로 공부를 해봐야겠다. 실무에서는 화이트 박스 테스트는 테스터가 하기엔 어려움이 있고, 개발자가 주로 유닛테스트를 통해 진행하는 듯하다. 블랙 박스 테스트 란 무엇인가?블랙 박스 테스트는 프로그램을 일종의 블랙박스로 보고 다양한 입력을 실행함으로써 소스 코드를 이용하지 않고 테스트를 수행 하는 방법이다. 대부분의 실무에서 블랙박스 테스트 방법을 수행하고 있다.블랙 박스 테스트의 기본적인 방법으로 등가 분할과 경계값 분석이 있다. if( a &gt;0 &amp;&amp; a &lt;100 &amp;&amp; b&gt;0 &amp;&amp; b&lt;100 ) { c = a*b; } else { // input error } 등가분할 ‘등가분할’ 이란 입력 영역을 ‘등가 클래스’라는 부분 집합으로 분할 하고, 그 부분 집합에서 선택한 입력값을 모두 같은 값(등가)라고 보는 작업이다. 예를 들어 입력 A 를 1~99 까지 입력 가능하고, 입력 B 를 1~ 99 까지 입력이 가능 하다고 가정 할 때출력 C = A B 의 결과 출력하는 프로그램이 있다고 하자.여기서 입력 할 수 있는 값을 A,B 모두 1~99 까지다. 사실상 1~99 사이의 어느 값 하나씩만 넣어 보면 c = ab 의 결과는 동일하게 출력 된다. 이 부분을 유효 등가라고 하고 -1 을 입력 하거나 100 이상을 입력 하였을 경우는 에러가 된다. 이를 무효 등가라고 부른다. 유효 등가 클래스와 무효 등가 클래스로 각각 케이스를 만들어 보자. 유효 등가 테스트 케이스(1) A=50 B=50 무효 등가 테스트 케이스(2) A = -1, B = -1(3) A = -2, B = 101(4) A = 0, B = 50(5) A = 50, B = 0(6) A = 50, B = 101(7) A = 101, B = 60(8) A = 110, B = 110(9) A = 105, B = -5(10) A = 0, B = 0 총 10가지의 케이스가 나올 수 있다. 이렇게 간단한 경우에도 무효 등가가 9개나 있기 때문에 효율적으로 테스트하기 위해서는 케이스를 줄여야 한다. 저자는 이를 ‘실천적 등가 클래스 테스트(Weak Robust Equivalent Test’ 라고 부른다.위의 예제에서 보면 (2)와 (8)이 무효 등가를 모두 포함하고 있음을 알 수 있다. 그래서 (1) 유효등가와 (2),(8),(10) 의 무효등가만 테스트하면 된다.( 여기서 A가 0 이고 B 가 0 인 경우는 항상 특별한 값이므로 입력할 수 있을 때는 항상 케이스에 포함하라고 한다. - 이유는 좀 알아봐야겠다. 잘 모르겠음.) 경계값 분석소프트웨어에서 경계가 되는 부분의 값에 버그가 있을 확률이 높다고 한다. 그래서 이 부분을 테스트 해야 하는데 이를 경계값 분석이라고 한다. 여기서 경계가 되는 부분이라 함은 유효등가와 무효등가의 경계를 말한다. 소프트웨어에서는 무효등가와 유효등가 사이에 반드시 조건문이 필요한데, 이러한 조건문을 올바르게 작성하지 않는 경우가 있기 때문에 테스트 해야 한다고 한다. 디시전 테이블 (Decision Table)모든 입력의 조합을 표로 만든 다음에 이에 해당하는 동작이나 출력하는 방법을 말한다. 이 방법은 복잡한 상태가 얽힌 기능 테스트에 도움이 된다고 한다. 위의 예제로 디시전 테이블을 만들어 보도록 하겠다. 경우1 : A,B 모두 입력 값이 올바른 경우경우2 : A는 올바른 입력이나 B 는 잘못된 입력인 경우경우3 : A 는 잘못된 입력이나 B 는 올바른 입력인 경우경우4 : A,B 둘다 잘못된 입력인 경우 이 방법은 단점이 있는데 아주 작은 소프트웨어거나 대규모 소프트웨어 일부분을 테스트 할 때만 사용할 수 있다. 예를 들어 1000개의 넘는 항목일 경우는 경우의 수가 너무 많아져서 테스트 할 수 없다.대신 항목이 적고 복잡하게 움직이는 소프트웨어에 대해서는 특정 경우가 빠지는 것을 막을 수 있기 때문에 유용한 방법이다.책을 읽으면서 계속 느끼는 것이지만, 하나의 소프트웨어 안에서도 기능에 따라 적합한 테스트 방법을 적용 해야 효율적인 테스트를 할 수 있다.상태 전이 테스트 일반적으로 요즘 소프트웨어는 항상 같은 상태에 있는 것이 아니라 상태를 변화 시켜 소프트웨어의 조작을 쉽도록 한다. 예를 들어 워드 프로세서와 같은 프로그램에서 파일을 열기 위해 파일 열기 메뉴를 클릭 했을 때 파일 열기 대화 상자가 표시되는 것은 상태 변화 이다. 만약에 이런 상태 변화가 없다면 사용하기 매우 어려운 소프트웨어가 될 것이다. 상태 전이 테스트는 UI 를 테스트 할 때 유용한 테스트가 된다. 이 때 발견할 수 있는 버그는 기대하지 않은 상태로 전이하는 버그 ( 쌩뚱맞은 화면으로 넘어가는 버그 ), 전이 자체가 일어 나지 않는 버그 ( 화면이나 동작의 변경이 없는 버그 ) 가 있다. 마찬가지로 상태 전이 테스트도 문제점이 있는데, 상태의 수가 너무 많은 경우 테스트 항목이 너무 늘어나서 테스트 할 수 없게 된다. 게다가 모델링 시간이 너무 걸리게 되어 실제 테스트 하는 시간이 부족해 진다. 20~30개 정도의 상태 전이가 일어나는 소프트웨어는 직접 모델링 할 수 있으나, 100개 이상의 상태 전이가 일어나는 소프트웨어는 반드시 지원 도구를 사용해야 모델링에 효율을 높일 수 있다. 무작위 테스트 ( Monkey Test )아무것도 생각하지 않고 입력이나 조작을 수행하는 방법을 말한다. 에드혹(Ad-hoc) 테스트, 애드립 테스트, 무작위 테스트, 몽키 테스트 와 같이 굉장히 다양한 이름으로 불리고 있다. 그러니 누군가가 몽키 테스트 라는 것 아느냐 라고 물어 본다면 당황하지 말길..이 테스트 방법도 전혀 효과가 없는 것은 아니니 빼먹지 않고 써보면 좋을 듯 하다. (의외로 많은 버그가 이 방법으로 발견되곤 한다. 소프트웨어를 이해하지 못한 사용자가 써보면 그게 무작위 테스트가 되는 것은 아닐까? 그래서 처음 사용하는 사용자가 버그를 많이 발견 해내나?) 소프트웨어 테스팅의 주요 목적은 많은 버그를 찾는 것이다. 하지만 보다 중요한 것은 효율적으로 버그를 찾는 것이다. 똑똑하지 않은 테스트를 많은 시간을 들여서 했다고 그만큼 소프트웨어의 품질이 올라가지 않는다는 뜻이다. 소프트웨어 테스팅 기법이라는 도구들로 똑똑한 테스트를 해 보자.","categories":[{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/categories/소프트웨어테스트/"}],"tags":[{"name":"SoftwareTest","slug":"SoftwareTest","permalink":"https://slim8020.github.io/tags/SoftwareTest/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/tags/소프트웨어테스트/"},{"name":"WhiteBox","slug":"WhiteBox","permalink":"https://slim8020.github.io/tags/WhiteBox/"},{"name":"BlackBox","slug":"BlackBox","permalink":"https://slim8020.github.io/tags/BlackBox/"},{"name":"화이트박스테스트","slug":"화이트박스테스트","permalink":"https://slim8020.github.io/tags/화이트박스테스트/"},{"name":"블랙박스테스트","slug":"블랙박스테스트","permalink":"https://slim8020.github.io/tags/블랙박스테스트/"}],"author":["slim8020"]},{"title":"테스트 케이스 만들기","slug":"SoftwareTest_TestCase","date":"2019-08-07T14:13:03.000Z","updated":"2021-05-12T11:46:27.416Z","comments":true,"path":"2019/08/07/SoftwareTest_TestCase/","link":"","permalink":"https://slim8020.github.io/2019/08/07/SoftwareTest_TestCase/","excerpt":"","text":"이 포스트는 “지식 제로부터 배우는 소프트웨어 테스트”를 읽고 학습한 내용입니다. 소프트웨어 테스트 지식의 필요성사회에 나오고 제일 먼저 접했던 것이 소프트웨어 테스팅이라는 것이었다. 그 때는 팀장님이 스터디해서 발표 해봐 라고 하셔서 의무적으로 공부 했었다. Validation 이니 Verification 이니 Blackbox Test 니 Whitebox Test 니 학교에서 배운 적 없는 용어들이 난무하는 이 분야에 대해서 어렵게만 생각했었다.개발 경력을 쌓아 나가면서 점점 소프트웨어의 품질에 대해서 관심이 생겼고, Project Manager 이자 Product Manager가 된 이 상황에서는 필수적인 지식이 되어야 했다. ( 근데 아는 게 없다. 회사 생활하면서 테스터들이 테스트 하는 것을 본 경험과 기본 개념 정도? ) 이런 상황(PM 이 될 상황)들을 예상이라도 했듯이 1년 전에 테스터의 필요성을 설파하여, 지금은 팀에 테스트를 담당하는 멤버가 있다. 하지만 테스트 담당자가 대학교를 갓 졸업한 신입이라 “테스트는 그냥 만들어진 소프트웨어를 이것저것 눌러보다 발견된 문제점을 리포트 하는 것” 이라는 생각을 가지고 있었다. 1년이 지난 지금은 아니지만.. 문제는 테스트 담당자는 있는데 경력이 없어서 테스트에 대해서는 문외한이라는 점이다. 그렇다고 가르쳐 주면서 일을 할 사람도 없다. 혼자서 공부를 하면서 일을 해 나가는데 어려움을 많이 겪고 있고, 나도 테스트 업무를 지시할 때 명확하지 못한 업무를 지시하는 경우가 많았다. 그래서 뒤늦게나마 책이라도 한권 읽고 중심이라도 잡아보자 라는 심정으로 읽게 된 책이 “지식 제로부터 배우는 소프트웨어 테스트” 이다. 책을 읽고 감상평만 쓰는 것은 항상 의미가 없다라는 생각이 들어서 실전에서 적용하는 사례를 책을 읽으면서 포스팅을 해 나갈 예정이다. 일단 오늘 읽은 데 까지만 포스팅! 소프트웨어 테스트 관련 책이 다 똑같듯이 테스트가 안 되면 어떤 문제가 발생하는지에 대한 것들이 초반에 나온다. 주로 많이 나오는게 나사 이야기 인데 여기서도…그 부분은 패스하고 “소프트웨어 테스트 실력 점검” 에 대해서 한번 해보겠다. 문제 문제에 해당 하는 내용으로 일단 개발자 입장에서 프로그램을 작성 해 봤다.Visual studio 2015 에서 C# 으로 작성 해 본 코드 이다. 테스트 케이스이제 테스터 입장에서 테스트 케이스를 설계 해 보겠다.( * 테스트 케이스란 무엇인가? 테스트 케이스가 무엇인지 정의한 내용을 구글에서 검색을 했는데 적당한 답을 찾지 못했다.잘 정리 해 두신 분도 있긴 한데.. 내가 생각하는 정의는 “개발한 소프트웨어의 동작에 대해서 검사할 항목” 이다.) 정답은? 몇 개의 케이스를 놓쳤다. 특히 두 변의 합이 다른 한변의 합과 같음. 두 변의 합이 다른 한변의 합보다 적음 의 경우는 기하학적 지식(?)까지 요구 하는 내용이다. 사실 테스트라는게 소프트웨어의 도메인(적용되는 분야)에 대한 지식도 요구되는 작업은 맞다. 그래서 인정! 테스트 케이스를 작성하는 것은 프로그램을 작성하는 것보다실제로 더 어려운 일입니다. 작가의 말도 인정!다음 포스팅에서는 화이트박스 테스트와 블랙박스 테스트에 대해서 읽고 정리 해 보려고 한다.","categories":[{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/categories/소프트웨어테스트/"}],"tags":[{"name":"SoftwareTest","slug":"SoftwareTest","permalink":"https://slim8020.github.io/tags/SoftwareTest/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/tags/소프트웨어테스트/"},{"name":"TestCase","slug":"TestCase","permalink":"https://slim8020.github.io/tags/TestCase/"},{"name":"테스트케이스","slug":"테스트케이스","permalink":"https://slim8020.github.io/tags/테스트케이스/"},{"name":"SQA","slug":"SQA","permalink":"https://slim8020.github.io/tags/SQA/"}],"author":["slim8020"]}],"categories":[{"name":"일상","slug":"일상","permalink":"https://slim8020.github.io/categories/일상/"},{"name":"에세이","slug":"에세이","permalink":"https://slim8020.github.io/categories/에세이/"},{"name":"프론트엔드","slug":"프론트엔드","permalink":"https://slim8020.github.io/categories/프론트엔드/"},{"name":"플러그인개발","slug":"플러그인개발","permalink":"https://slim8020.github.io/categories/플러그인개발/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/categories/소프트웨어테스트/"}],"tags":[{"name":"diary","slug":"diary","permalink":"https://slim8020.github.io/tags/diary/"},{"name":"Saving","slug":"Saving","permalink":"https://slim8020.github.io/tags/Saving/"},{"name":"Diligence","slug":"Diligence","permalink":"https://slim8020.github.io/tags/Diligence/"},{"name":"health","slug":"health","permalink":"https://slim8020.github.io/tags/health/"},{"name":"Joy","slug":"Joy","permalink":"https://slim8020.github.io/tags/Joy/"},{"name":"Growth","slug":"Growth","permalink":"https://slim8020.github.io/tags/Growth/"},{"name":"writing","slug":"writing","permalink":"https://slim8020.github.io/tags/writing/"},{"name":"essay","slug":"essay","permalink":"https://slim8020.github.io/tags/essay/"},{"name":"question","slug":"question","permalink":"https://slim8020.github.io/tags/question/"},{"name":"web","slug":"web","permalink":"https://slim8020.github.io/tags/web/"},{"name":"css","slug":"css","permalink":"https://slim8020.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://slim8020.github.io/tags/html/"},{"name":"javascript","slug":"javascript","permalink":"https://slim8020.github.io/tags/javascript/"},{"name":"publishing","slug":"publishing","permalink":"https://slim8020.github.io/tags/publishing/"},{"name":"mediaquery","slug":"mediaquery","permalink":"https://slim8020.github.io/tags/mediaquery/"},{"name":"flex","slug":"flex","permalink":"https://slim8020.github.io/tags/flex/"},{"name":"grid","slug":"grid","permalink":"https://slim8020.github.io/tags/grid/"},{"name":"transition","slug":"transition","permalink":"https://slim8020.github.io/tags/transition/"},{"name":"Webpublishing","slug":"Webpublishing","permalink":"https://slim8020.github.io/tags/Webpublishing/"},{"name":"Essay","slug":"Essay","permalink":"https://slim8020.github.io/tags/Essay/"},{"name":"HTML","slug":"HTML","permalink":"https://slim8020.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://slim8020.github.io/tags/CSS/"},{"name":"Training","slug":"Training","permalink":"https://slim8020.github.io/tags/Training/"},{"name":"NPM","slug":"NPM","permalink":"https://slim8020.github.io/tags/NPM/"},{"name":"NODE","slug":"NODE","permalink":"https://slim8020.github.io/tags/NODE/"},{"name":"AdobeXD","slug":"AdobeXD","permalink":"https://slim8020.github.io/tags/AdobeXD/"},{"name":"Plugin","slug":"Plugin","permalink":"https://slim8020.github.io/tags/Plugin/"},{"name":"Development","slug":"Development","permalink":"https://slim8020.github.io/tags/Development/"},{"name":"어도비XD","slug":"어도비XD","permalink":"https://slim8020.github.io/tags/어도비XD/"},{"name":"플러그인","slug":"플러그인","permalink":"https://slim8020.github.io/tags/플러그인/"},{"name":"개발","slug":"개발","permalink":"https://slim8020.github.io/tags/개발/"},{"name":"SoftwareTest","slug":"SoftwareTest","permalink":"https://slim8020.github.io/tags/SoftwareTest/"},{"name":"Test","slug":"Test","permalink":"https://slim8020.github.io/tags/Test/"},{"name":"소프트웨어테스트","slug":"소프트웨어테스트","permalink":"https://slim8020.github.io/tags/소프트웨어테스트/"},{"name":"NonFunctional","slug":"NonFunctional","permalink":"https://slim8020.github.io/tags/NonFunctional/"},{"name":"PerformanceTest","slug":"PerformanceTest","permalink":"https://slim8020.github.io/tags/PerformanceTest/"},{"name":"비기능테스트","slug":"비기능테스트","permalink":"https://slim8020.github.io/tags/비기능테스트/"},{"name":"성능테스트","slug":"성능테스트","permalink":"https://slim8020.github.io/tags/성능테스트/"},{"name":"ExploratoryTest","slug":"ExploratoryTest","permalink":"https://slim8020.github.io/tags/ExploratoryTest/"},{"name":"탐색적테스트","slug":"탐색적테스트","permalink":"https://slim8020.github.io/tags/탐색적테스트/"},{"name":"WhiteBox","slug":"WhiteBox","permalink":"https://slim8020.github.io/tags/WhiteBox/"},{"name":"BlackBox","slug":"BlackBox","permalink":"https://slim8020.github.io/tags/BlackBox/"},{"name":"화이트박스테스트","slug":"화이트박스테스트","permalink":"https://slim8020.github.io/tags/화이트박스테스트/"},{"name":"블랙박스테스트","slug":"블랙박스테스트","permalink":"https://slim8020.github.io/tags/블랙박스테스트/"},{"name":"TestCase","slug":"TestCase","permalink":"https://slim8020.github.io/tags/TestCase/"},{"name":"테스트케이스","slug":"테스트케이스","permalink":"https://slim8020.github.io/tags/테스트케이스/"},{"name":"SQA","slug":"SQA","permalink":"https://slim8020.github.io/tags/SQA/"}]}